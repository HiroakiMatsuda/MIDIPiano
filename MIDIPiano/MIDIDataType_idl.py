# Python stubs generated by omniidl from MIDIDataType.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "BasicDataType.idl"
import BasicDataType_idl
_0_RTC = omniORB.openModule("RTC")
_0_RTC__POA = omniORB.openModule("RTC__POA")

#
# Start of module "MIDI"
#
__name__ = "MIDI"
_0_MIDI = omniORB.openModule("MIDI", r"MIDIDataType.idl")
_0_MIDI__POA = omniORB.openModule("MIDI__POA", r"MIDIDataType.idl")


# struct ChannelMessage
_0_MIDI.ChannelMessage = omniORB.newEmptyClass()
class ChannelMessage (omniORB.StructBase):
    _NP_RepositoryId = "IDL:MIDI/ChannelMessage:1.0"

    def __init__(self, channel, note_number, velocity, control_number, value, number_of_channels, tone_number, pressure, pitch_bend):
        self.channel = channel
        self.note_number = note_number
        self.velocity = velocity
        self.control_number = control_number
        self.value = value
        self.number_of_channels = number_of_channels
        self.tone_number = tone_number
        self.pressure = pressure
        self.pitch_bend = pitch_bend

_0_MIDI.ChannelMessage = ChannelMessage
_0_MIDI._d_ChannelMessage  = (omniORB.tcInternal.tv_struct, ChannelMessage, ChannelMessage._NP_RepositoryId, "ChannelMessage", "channel", omniORB.tcInternal.tv_short, "note_number", omniORB.tcInternal.tv_short, "velocity", omniORB.tcInternal.tv_short, "control_number", omniORB.tcInternal.tv_short, "value", omniORB.tcInternal.tv_short, "number_of_channels", omniORB.tcInternal.tv_short, "tone_number", omniORB.tcInternal.tv_short, "pressure", omniORB.tcInternal.tv_short, "pitch_bend", omniORB.tcInternal.tv_long)
_0_MIDI._tc_ChannelMessage = omniORB.tcInternal.createTypeCode(_0_MIDI._d_ChannelMessage)
omniORB.registerType(ChannelMessage._NP_RepositoryId, _0_MIDI._d_ChannelMessage, _0_MIDI._tc_ChannelMessage)
del ChannelMessage

# struct SystemMessage
_0_MIDI.SystemMessage = omniORB.newEmptyClass()
class SystemMessage (omniORB.StructBase):
    _NP_RepositoryId = "IDL:MIDI/SystemMessage:1.0"

    def __init__(self, data, sequence_number, text, copyright_notice, sequence_name, instrument_name, lyrics, marker, cue_point, program_name, device_name, midi_channel, port, tempo, offset, molecule, denominator, click, notes_per_clocks, sf, mi):
        self.data = data
        self.sequence_number = sequence_number
        self.text = text
        self.copyright_notice = copyright_notice
        self.sequence_name = sequence_name
        self.instrument_name = instrument_name
        self.lyrics = lyrics
        self.marker = marker
        self.cue_point = cue_point
        self.program_name = program_name
        self.device_name = device_name
        self.midi_channel = midi_channel
        self.port = port
        self.tempo = tempo
        self.offset = offset
        self.molecule = molecule
        self.denominator = denominator
        self.click = click
        self.notes_per_clocks = notes_per_clocks
        self.sf = sf
        self.mi = mi

_0_MIDI.SystemMessage = SystemMessage
_0_MIDI._d_SystemMessage  = (omniORB.tcInternal.tv_struct, SystemMessage, SystemMessage._NP_RepositoryId, "SystemMessage", "data", (omniORB.tcInternal.tv_string,0), "sequence_number", omniORB.tcInternal.tv_short, "text", (omniORB.tcInternal.tv_string,0), "copyright_notice", (omniORB.tcInternal.tv_string,0), "sequence_name", (omniORB.tcInternal.tv_string,0), "instrument_name", (omniORB.tcInternal.tv_string,0), "lyrics", (omniORB.tcInternal.tv_string,0), "marker", (omniORB.tcInternal.tv_string,0), "cue_point", (omniORB.tcInternal.tv_string,0), "program_name", (omniORB.tcInternal.tv_string,0), "device_name", (omniORB.tcInternal.tv_string,0), "midi_channel", omniORB.tcInternal.tv_short, "port", omniORB.tcInternal.tv_short, "tempo", omniORB.tcInternal.tv_long, "offset", omniORB.tcInternal.tv_long, "molecule", omniORB.tcInternal.tv_short, "denominator", omniORB.tcInternal.tv_short, "click", omniORB.tcInternal.tv_short, "notes_per_clocks", omniORB.tcInternal.tv_short, "sf", omniORB.tcInternal.tv_short, "mi", omniORB.tcInternal.tv_short)
_0_MIDI._tc_SystemMessage = omniORB.tcInternal.createTypeCode(_0_MIDI._d_SystemMessage)
omniORB.registerType(SystemMessage._NP_RepositoryId, _0_MIDI._d_SystemMessage, _0_MIDI._tc_SystemMessage)
del SystemMessage

# struct MIDIMessage
_0_MIDI.MIDIMessage = omniORB.newEmptyClass()
class MIDIMessage (omniORB.StructBase):
    _NP_RepositoryId = "IDL:MIDI/MIDIMessage:1.0"

    def __init__(self, tm, event, ch, sys):
        self.tm = tm
        self.event = event
        self.ch = ch
        self.sys = sys

_0_MIDI.MIDIMessage = MIDIMessage
_0_MIDI._d_MIDIMessage  = (omniORB.tcInternal.tv_struct, MIDIMessage, MIDIMessage._NP_RepositoryId, "MIDIMessage", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "event", (omniORB.tcInternal.tv_string,0), "ch", omniORB.typeMapping["IDL:MIDI/ChannelMessage:1.0"], "sys", omniORB.typeMapping["IDL:MIDI/SystemMessage:1.0"])
_0_MIDI._tc_MIDIMessage = omniORB.tcInternal.createTypeCode(_0_MIDI._d_MIDIMessage)
omniORB.registerType(MIDIMessage._NP_RepositoryId, _0_MIDI._d_MIDIMessage, _0_MIDI._tc_MIDIMessage)
del MIDIMessage

#
# End of module "MIDI"
#
__name__ = "MIDIDataType_idl"

_exported_modules = ( "MIDI", )

# The end.
